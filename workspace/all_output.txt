Given the requirements, we will need to create a Shiny application with the following files:

1. `app.R`: This is the main entry point of the application. It will contain the UI and server definitions, as well as the code to run the Shiny app.

2. `analysis_functions.R`: This file will contain the functions that perform the RNA-Seq data analysis. Each function will correspond to a step in the analysis workflow.

Here are the contents of each file:

app.R
```R
# Load Shiny library
library(shiny)

# Source the file containing the analysis functions
source("analysis_functions.R")

# Define UI
ui <- fluidPage(
  titlePanel("Single Cell RNA-Seq Data Analysis"),
  sidebarLayout(
    sidebarPanel(
      actionButton("load_button", "Load libraries"),
      actionButton("init_button", "Initialize Seurat object"),
      actionButton("qc_button", "Perform QC"),
      actionButton("filter_button", "Filter data"),
      actionButton("normalize_button", "Normalize data"),
      actionButton("identify_button", "Identify highly variable features"),
      actionButton("scale_button", "Scale data"),
      actionButton("linear_dim_button", "Perform linear dimensionality reduction"),
      actionButton("cluster_button", "Cluster data"),
      actionButton("nonlinear_dim_button", "Perform non-linear dimensionality reduction")
    ),
    mainPanel(
      # Output will be displayed here
    )
  )
)

# Define server logic
server <- function(input, output) {
  observeEvent(input$load_button, {
    loadLibraries()
  })
  observeEvent(input$init_button, {
    initializeSeuratObject()
  })
  observeEvent(input$qc_button, {
    performQC()
  })
  observeEvent(input$filter_button, {
    filterData()
  })
  observeEvent(input$normalize_button, {
    normalizeData()
  })
  observeEvent(input$identify_button, {
    identifyHighlyVariableFeatures()
  })
  observeEvent(input$scale_button, {
    scaleData()
  })
  observeEvent(input$linear_dim_button, {
    performLinearDimensionalityReduction()
  })
  observeEvent(input$cluster_button, {
    clusterData()
  })
  observeEvent(input$nonlinear_dim_button, {
    performNonLinearDimensionalityReduction()
  })
}

# Run the application 
shinyApp(ui = ui, server = server)
```

analysis_functions.R
```R
# Define functions for each step of the analysis workflow

loadLibraries <- function() {
  library(Seurat)
  library(tidyverse)
}

initializeSeuratObject <- function() {
  # Code to initialize the Seurat object goes here
}

performQC <- function() {
  # Code to perform QC goes here
}

filterData <- function() {
  # Code to filter the data goes here
}

normalizeData <- function() {
  # Code to normalize the data goes here
}

identifyHighlyVariableFeatures <- function() {
  # Code to identify highly variable features goes here
}

scaleData <- function() {
  # Code to scale the data goes here
}

performLinearDimensionalityReduction <- function() {
  # Code to perform linear dimensionality reduction goes here
}

clusterData <- function() {
  # Code to cluster the data goes here
}

performNonLinearDimensionalityReduction <- function() {
  # Code to perform non-linear dimensionality reduction goes here
}
```

Please note that you will need to fill in the code for each analysis function based on your existing R script. The functions should be designed to work with the data that is loaded into the Shiny app, and any output should be returned in a format that can be displayed in the Shiny UI.